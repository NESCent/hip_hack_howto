## Lessons learned 

### Make people feel welcome; encourage people

Being welcoming during the event
* provide bootcamps to address issues that might not be of knowledge to all participants
* instruct pitchers to keep an open circle (don't turn back on others, don't get deep in a 1:1)
* organize whole-group social event and create strong expectation of participation

Being welcoming during recruiting
* specifically name and identify groups and roles other than programmer; never refer to participants as though they are chiefly "programmers" if you want to welcome people who are not chiefly programmers
* dial back on intimidating technical language in the advertisement
* invite people to apply by personal contact and encouragement

Being welcoming during the pre-event engagement period: 
* contact newbies individually by email with a welcome message (from an LT member)
* invite each person to introduce themselves on group email list 
* provide positive and encouraging feedback on ideas

Actions taken during three different stages are critical to creating a welcoming atmosphere.  First, when crafting recruitment materials and deciding where to target advertisements, remember that hackathons are not just for gurus.  Dial back on the technical language (in the advertisement materials), and make the big picture clear.  Specify non-programmer roles (e.g., "subject-matter expert", "use-case consultant"), and avoid implicitly equating participants with programmers (e.g., don't refer to participants as "programmers" or "coders").   Second, during  pre-event engagement, add everyone to an event- or project-specific email list and ask them to introduce themselves to the list.  Encourage all participants to develop possible ideas for the hackathon event and provide encouraging feedback on ideas discussed on the list.  Send a personal, encouraging email to any newbies who seem to need it.  Third and most importantly, be welcoming during the event, particularly on day 1.  Use bootcamps and technical talks to get everyone up to speed on core technologies for the event.  Prior to pitching, instruct participants to form an open circle around pitches, not a queue or a blockâ€” in particular, if the pitcher and a few others are having a highly technical discussion with their backs to everyone else, this is very unwelcoming, and the facilitators should step in and remind them to keep the circle open.   Participants leading a pitch and subsequent team should encourage participation of all the team members (asking questions, positively encouraging inputs). A critical component is ensuring the formation of positive interactions among participants, e.g., through a whole-group social event to cap off he first day (solicit ideas from participants). 

### Scoping with flexibility and limits 

flexible: 
* to allow participants to self-determine, self-assemble around projects of interest
* to allow participants to employ creativity to find overlap between personal goals and scope

limits: 
* LT's scoping statement (which addresses goals of sponsor)
* ?Monitor pitches, especially in the pre-event activities?

technology limit: 
* OpenTree API
* phyloinfo: Bio* libraries 
* comp method in R: R
* interop: Nexml, CDAO, phylows

content restriction in terms of schema or theme: 
* compar methods in R: comp methods 
* phylotastic: workflow or schema (a system)
* db interop: interoperability 

Participants come to hackathons to accomplish cool stuff and to network, not to advance the sponsor's goals.  The aim of scoping by the LT is to specify the technological and thematic limits to ensure that conformant projects advance the goals of the sponsors, while giving maximum flexibility to participants to leverage their own unique skills and interests, and to advance their own personal goals.  NESCent hackathons typically have technology limitations (or technological focus) as part of the scope.  For "Comparative Methods in R", the technology limit was to use R, and the thematic limit was the academically defined area of comparative evolutionary methods.  For the "Database Interoperability Hackathon", we encouraged users to apply a specific interoperability "stack" developed by the EvoInfo working group (NeXML file format, PhyloWS web service schema, and CDAO, the comparative data analysis ontology) to the problem of building links between data resources, or linking resources to users. For the TreeForAll hackathon, the technology limitation was to make use of OpenTree's web services API, and there was no restriction on themes.  For the "Phylotastic I and II hackathons," the thematic limit was the development of a workflow system to facilitate extraction and use of parts of large trees; we encouraged participants to explore the components of the workflow, the underlying architectural variations to make the workflow feasible, and possible applications of the system.

Our practice is to encourage, but not rigidly enforce, conformity to scope.  In practice, projects that do not conform to the scope rarely make it out of the pitching stage.  The scope is encouraged by the leadership team, first by the text of advertisements, and thereafter by interactions with participants.  The opening talks on day 1 of the hackathon should reiterate the scope and explain what it signifies.  When a potentially out-of-scope idea arises, rather than asking a negatively framed question ("Isn't that out of scope?"), a more welcoming approach is simply to ask the proposer to flesh out possible ways in which the idea aligns with the thematic and technical scope of the hackathon ("what are some ways that this project will . . .?").  This question should be asked during pre-event engagement, and during pitching (by organizers present at the hackathon). 


Possible useful references:
- Ten Simple Rules to Achieve Conference Speaker Gender Balance http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003903
- Work Groups, Structural Diversity, and Knowledge Sharing in a Global Organization, Jonathon N. Cummings, Management Science, Vol. 50, No. 3 (Mar., 2004), pp. 352-364

Ideas to try 
* rotate presenters during the stand-ups


## POST-EVENT

(Aidan's "completed" attempt to  list all the statements made until post-day-2-lunch about this topic  i.e. this is his list after running through both of the "notes from day  1" and "notes from day 2 until after lunch that day" Etherpads)

what happens post-event:

Things that must be done/required
* Reimburse people for participating
* Develop report to NESCent

*  tangible outcomes usually cant be completed at event itself, requires post-hackathon work
* things we tried/did:
** maintain contact with participants through the use of established mailing list and continue populating wiki page for the event
** follow up teleconferences among (a subset of) the participants
** reserved a full-day for a follow-up distributed coding activity
** teams work on papers/reports describing the outcomes of the hackathon (e.g., the Phylotastic manuscript)
** teams organize follow up meetings/sessions (e.g., at relevant conferences)
** teams work on proposals to secure funding for follow-up developments (e.g., hire professional programmers)

Hypotheses/questions about ways of getting more post-event activity/sustainability:

- what aspect of people involved in event lead to sustained effort?

- hypothesis:  need people for who the product matters; not tenured professors and not  technicians who are only paid for the event itself; young academic
- hypothesis:  the community "buys" into the activities of the hackathon and are willing to embrace and continue (e.g., they become part of a used codebase)
- hypothesis:  projects with better code may be more likely to continue and those  might come from people with software engineering experience

generic thoughts/observations:

- having time-post hackathon is only one aspect of sustainability

- getting sustainable products out of hackathons is very difficult

- Setting expectations about what will happen afterwards is important




## OUTCOMES/IMPACT/BENEFITS OF HACKATHONS

List of possible outcomes:
- increased diversity (demographic, and otherwise) of participants in related software projects (developed from "early on, we wanted experts to build tools, later we were more inclusive and more focused on diversity")
 * community becomes aware of a particular problem and technologies to solve it (example of web services)
 * one of goals is community capacity building; informatics and open source literacy
 * introduction to other open source and collaboration tools
 * bridge gap between coder culture and user culture
 * also what technical folks can learn about better software engineering
 * also what technical folks can learn about better social skills
 * tangible outputs via NEAD - pubs, proposals, software, data sets, data formats, presentations, newsletters
 * Code
   * Draft vs working quality
   * Sustained development activity
   * Attention received ("#stars", "#watchers")
   * Adoption by non-participants
     * #forks
     * #downloads
   * Sloc and #commits: not useful measures
 * Publication(s)
   * Number of articles
   * Number of citations of these articles
 * Other products: data sets, standards, ontologies, etc.
 * Documentation
   * Number of docs
   * Number of words/pages
 * Collaboration(s)
   * Co-developed software packages
   * Number of co-authored publications post-hackathon?
 * Grant proposal(s) or funding
   * Number
   * Dollars
 * Team camaraderie
 * People network connections
   * (Includes concepts such as increasing community/diversity)
   * Twitter (GitHub, Google+, Mendeley) connections before vs after (but not everyone uses Twitter;  also RTs, favourites, co-mentions; could also look at how this changes  with time; measuring RTs of tweets using an event hashtag)
   * Surveys
   * Charting how these have changed through time
 * Technology awareness
   * New users of a technology (e.g, active git accounts)
 * Training through exchange of knowledge and know-how
 * Publicity for project or brand
   * News releases and where they are picked up
   * Conference presentations, posters
   * Social media impressions
 * Broadening perspective
   * Survey to get data
   * Idea inspiration (for projects/work unrelated to hackathon)
 *  tangible outputs not via NEAD
   * lines of code committed, commits
   * conference sessions organized
   * educational or training materials
   * live demos
   * screencasts
   * web sites 
   * mailing lists
   * web analytics, github analytics
   * blog posts - Holly; Arlin
   * internet buzz
   * report submitted to NESCent 
   * co-authoring of pubs, proposals - don't have
   * collaborations - don't have
   * technologies adopted (e.g., github)
   * concepts learned - 
   * doors opened - 
   * progression of involvement in community activities
   * sharing of resources 

Specific tangible already-anknowledged outcomes:
 * VoCamp:  not well-scoped; outside of regular expertise of organizers; ended up  with people working on own rather than in groups; perhaps also  structural reasons (poor room, parallel with conference sessions); but  also lead to grant proposal on phyloreferencing
 * note  that Phyotastic II was unsuccessful with respect to tangible outcomes  but may have succeeded in terms of community engagement
 * example from R hackathon - very little source code available before event, all code open-source after event

Why collect/measure them:
 * need impacts that pointy-headed bosses can understand / appreciate
 * would like to be able to justify using budget for hackathons vs meetings; do hackathons lead to something worth funding

Generic thoughts/observawtions:
 * do hackathon papers get sufficient citations?
 * difficult to quantify impact well; there are research groups working on software communities and software impact
 * given limited resources, what outputs to focus on?
 * getting sustainable products out of hackathons is very difficult
 * hacking medicine hackathons (http://hackingmedicine.mit.edu/):  large events; specifically geared toward products that could become  startups; commercially viable products; number of products is impressive  but may not be a higher % than what we have
 * hypothesis: the less the products are pre-conceived, the better they turn out 

Tensions between achieving particular kinds of output/benefit/impact
 * goal  of writing code + goal of building community; makes it a challenge when  planning (writing / evaluating applications; facilitation)

## DURING THE HACKATHON

(Aidan's "completed" attempt to list all the statements made until post-day-2-lunch about this topic i.e. this is his list after running through both of the "notes from day 1" and "notes from day 2 until after lunch that day" Etherpads)

### what we aimed to do:

### what we wanted to avoid:

- people working on own rather than in groups

### what worked/advice:

- Make people feel welcome; encourage people

- "No plan survives contact with the enemy" (substitute "reality" for "the enemy"?): be flexible, don't overplan

- if you can get people in room working on something that they care about, get best outcomes

- Communication is much more key than people are likely realize

- Facilitation is very important, particularly social facilitation

- work with any on-site event coordinator regarding access, signage, powerstrips/outlets etc

### what doesn't work well

- use too many different technologies and changing tech between meetings (google docs vs etherpad, skype vs hangouts)

- A hackathon is not necessarily the best place to test out the latest greatest technology

### decisions to make

- whether or not to allow critique at the pitching stage

